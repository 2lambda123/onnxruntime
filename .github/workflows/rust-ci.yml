name: Rust

on: [pull_request]

defaults:
 run:
  working-directory: ./rust/

env:
  CARGO_TERM_COLOR: always
  RUST_LOG: onnxruntime=debug,onnxruntime-sys=debug
  RUST_BACKTRACE: 1
  MANIFEST_PATH: ${{ github.workspace }}/rust/Cargo.toml

jobs:
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/rust-toolchain-setup
      - name: vendor onnxruntime source
        run: just vendor
      - name: fmt
        run: cargo fmt --all -- --check

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        target:
          [
            x86_64-unknown-linux-gnu,
            x86_64-apple-darwin,
            x86_64-pc-windows-msvc,
            i686-pc-windows-msvc,
          ]
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: i686-pc-windows-msvc
            os: windows-latest
    env:
      CARGO_BUILD_TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/rust-toolchain-setup
      - name: vendor onnxruntime source
        run: just vendor
      - run: rustup target install ${{ matrix.target }}
      - name: Install additional packages (macOS)
        if: contains(matrix.target, 'x86_64-apple-darwin')
        run: brew install libomp
      - name: Build (cargo build)
        run: cargo build --all --target ${{ matrix.target }} --manifest-path ${{ env.MANIFEST_PATH }}
      - name: Build tests (cargo test)
        run: cargo test --target ${{ matrix.target }} --no-run --manifest-path ${{ env.MANIFEST_PATH }}
      - name: Build onnxruntime with 'model-fetching' feature
        run: cargo build --target ${{ matrix.target }} --manifest-path ${{ env.MANIFEST_PATH }} --features model-fetching
      - name: Test onnxruntime-sys
        run: cargo test --target ${{ matrix.target }} --package onnxruntime-sys -- --test-threads=1 --nocapture
      - name: Test onnxruntime
        run: cargo test --target ${{ matrix.target }} --manifest-path ${{ env.MANIFEST_PATH }} --features model-fetching -- --test-threads=1 --nocapture

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/rust-toolchain-setup
      - name: vendor onnxruntime source
        run: just vendor
      - run: cargo clippy --all-features --manifest-path ${{ env.MANIFEST_PATH }} -- -D warnings

  package-sys:
    name: Package onnxruntime-sys
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/rust-toolchain-setup
      - name: vendor onnxruntime source
        run: just vendor
      - run: cargo package --allow-dirty --package onnxruntime-sys

parameters:
- name: RunOnnxRuntimeTests
  displayName: Run Tests?
  type: boolean
  default: true

- name: DoCompliance
  displayName: Run Compliance Tasks?
  type: boolean
  default: true

- name: DoEsrp
  displayName: Run code sign tasks? Must be true if you are doing an Onnx Runtime release.
  type: boolean
  default: false

- name: IsReleaseBuild
  displayName: Is a release build? Set it to true if you are doing an Onnx Runtime release.
  type: boolean
  default: false

- name: AdditionalBuildFlags
  displayName: Additional build flags for build.py
  type: string
  default: ''

- name: AdditionalWinBuildFlags
  displayName: Additional build flags that just for Windows Builds
  type: string
  default: ''

- name: OrtNugetPackageId
  displayName: Package name for nuget
  type: string
  default: 'Microsoft.ML.OnnxRuntime'

- name: BuildVariant
  type: string
  default: 'default'

- name: SpecificArtifact
  displayName: Use Specific Artifact
  type: boolean
  default: false

- name: BuildId
  displayName: Specific Artifact's BuildId
  type: string
  default: '0'

stages:
- template: linux-cpu-packaging-pipeline.yml
  parameters:
    AdditionalBuildFlags: ${{ parameters.AdditionalBuildFlags }}

- template: mac-cpu-packaging-pipeline.yml
  parameters:
    AllowReleasedOpsetOnly: 1
    BuildForAllArchs: true
    SpecificArtifact: ${{ parameters.SpecificArtifact }}
    BuildId: ${{ parameters.BuildId }}
    DoEsrp: ${{ parameters.DoEsrp }}

- template: win-ci.yml
  parameters:
    DoCompliance: ${{ parameters.DoCompliance }}
    DoEsrp: ${{ parameters.DoEsrp }}
    stage_name_suffix: CPU_x86_${{ parameters.BuildVariant }}
    EnvSetupScript: setup_env_x86.bat
    buildArch: x86
    msbuildPlatform: Win32
    packageName: x86
    buildparameter: ${{ parameters.AdditionalBuildFlags }} ${{ parameters.AdditionalWinBuildFlags}}
    runTests: ${{ parameters.RunOnnxRuntimeTests }}
    buildJava: false
    buildNodejs: false

- template: win-ci.yml
  parameters:
    DoCompliance: ${{ parameters.DoCompliance }}
    DoEsrp: ${{ parameters.DoEsrp }}
    stage_name_suffix: CPU_arm_${{ parameters.BuildVariant }}
    EnvSetupScript: setup_env.bat
    buildArch: x64
    msbuildPlatform: arm
    packageName: arm
    buildparameter: --arm ${{ parameters.AdditionalBuildFlags }}  ${{ parameters.AdditionalWinBuildFlags}} --path_to_protoc_exe $(Build.BinariesDirectory)\RelWithDebInfo\installed\bin\protoc.exe
    runTests: false
    buildJava: false
    buildNodejs: false
    ort_build_pool_name: onnxruntime-Win-CPU-2022

- template: win-ci.yml
  parameters:
    DoCompliance: ${{ parameters.DoCompliance }}
    DoEsrp: ${{ parameters.DoEsrp }}
    stage_name_suffix: CPU_arm64_${{ parameters.BuildVariant }}
    EnvSetupScript: setup_env.bat
    buildArch: x64
    msbuildPlatform: arm64
    packageName: arm64
    buildparameter: --build_nodejs --arm64 ${{ parameters.AdditionalBuildFlags }}  ${{ parameters.AdditionalWinBuildFlags}} --path_to_protoc_exe $(Build.BinariesDirectory)\RelWithDebInfo\installed\bin\protoc.exe
    runTests: false
    buildJava: false
    buildNodejs: true

- template: win-ci.yml
  parameters:
    DoCompliance: ${{ parameters.DoCompliance }}
    DoEsrp: ${{ parameters.DoEsrp }}
    stage_name_suffix: CPU_x64_${{ parameters.BuildVariant }}
    EnvSetupScript: setup_env.bat
    buildArch: x64
    msbuildPlatform: x64
    packageName: x64
    buildparameter: --build_java --build_nodejs ${{ parameters.AdditionalBuildFlags }}  ${{ parameters.AdditionalWinBuildFlags}}
    runTests: ${{ parameters.RunOnnxRuntimeTests }}
    buildJava: true
    buildNodejs: true

- stage: Nodejs_Packaging_CPU
  dependsOn:
  - Linux_C_API_Packaging_CPU
  - MacOS_C_API_Package_Publish
  - Windows_Packaging_CPU_x64_${{ parameters.BuildVariant }}
  - Windows_Packaging_CPU_arm64_${{ parameters.BuildVariant }}
  condition: succeeded()
  jobs:
  - job:
    workspace:
      clean: all
    pool: 'onnxruntime-Win-CPU-2022'
    variables:
      ${{ if eq(parameters.IsReleaseBuild, true) }}:
        NpmPackagingMode: 'release'
      ${{ if not(eq(parameters.IsReleaseBuild, true)) }}:
        NpmPackagingMode: 'dev'
      breakCodesignValidationInjection: ${{ parameters.DoEsrp }}

    steps:
    - checkout: self
      submodules: true

    - script: |
       echo.>>.gitattributes
       echo /js/** text=auto eol=lf>>.gitattributes
       rd /s /q js
       git checkout -- js/**
       git checkout -- .gitattributes
      workingDirectory: '$(Build.SourcesDirectory)'
      displayName: 'Testing: force EOL to lf on windows for /js/**'

    - task: DownloadPipelineArtifact@0
      displayName: 'Download Pipeline Artifact - NuGet (Win x64)'
      inputs:
        artifactName: 'onnxruntime-win-x64'
        targetPath: '$(Build.BinariesDirectory)/nuget-artifact'

    - task: DownloadPipelineArtifact@0
      displayName: 'Download Pipeline Artifact - NuGet (Win ARM64)'
      inputs:
        artifactName: 'onnxruntime-win-arm64'
        targetPath: '$(Build.BinariesDirectory)/nuget-artifact'

    - task: DownloadPipelineArtifact@0
      displayName: 'Download Pipeline Artifact - NuGet (OSX)'
      inputs:
        artifactName: 'onnxruntime-osx'
        targetPath: '$(Build.BinariesDirectory)/nuget-artifact'

    - task: DownloadPipelineArtifact@0
      displayName: 'Download Pipeline Artifact - NuGet (Linux x64)'
      inputs:
        artifactName: 'onnxruntime-linux-x64'
        targetPath: '$(Build.BinariesDirectory)/nuget-artifact'

    - task: DownloadPipelineArtifact@0
      displayName: 'Download Pipeline Artifact - NuGet (Linux aarch64)'
      inputs:
        artifactName: 'onnxruntime-linux-aarch64'
        targetPath: '$(Build.BinariesDirectory)/nuget-artifact'

    - task: DownloadPipelineArtifact@0
      displayName: 'Download Pipeline Artifact - Nodejs (Win x64)'
      inputs:
        artifactName: 'drop-onnxruntime-nodejs-win-x64'
        targetPath: '$(Build.BinariesDirectory)/nodejs-artifacts/win32/x64/'

    - task: DownloadPipelineArtifact@0
      displayName: 'Download Pipeline Artifact - Nodejs (Win ARM64)'
      inputs:
        artifactName: 'drop-onnxruntime-nodejs-win-arm64'
        targetPath: '$(Build.BinariesDirectory)/nodejs-artifacts/win32/arm64/'

    - task: DownloadPipelineArtifact@0
      displayName: 'Download Pipeline Artifact - Nodejs (macOS x86_64)'
      inputs:
        artifactName: 'drop-onnxruntime-nodejs-osx-x86_64'
        targetPath: '$(Build.BinariesDirectory)/nodejs-artifacts/darwin/x64/'

    - task: DownloadPipelineArtifact@0
      displayName: 'Download Pipeline Artifact - Nodejs (macOS arm64)'
      inputs:
        artifactName: 'drop-onnxruntime-nodejs-osx-arm64'
        targetPath: '$(Build.BinariesDirectory)/nodejs-artifacts/darwin/arm64/'

    - task: DownloadPipelineArtifact@0
      displayName: 'Download Pipeline Artifact - Nodejs (Linux x64)'
      inputs:
        artifactName: 'drop-onnxruntime-nodejs-linux-x64'
        targetPath: '$(Build.BinariesDirectory)/nodejs-artifacts/linux/x64/'

    - task: DownloadPipelineArtifact@0
      displayName: 'Download Pipeline Artifact - Nodejs (Linux aarch64)'
      inputs:
        artifactName: 'drop-onnxruntime-nodejs-linux-aarch64'
        targetPath: '$(Build.BinariesDirectory)/nodejs-artifacts/linux/arm64/'

    - task: DownloadPipelineArtifact@0
      displayName: 'Download Pipeline Artifact - NuGet'
      inputs:
        artifactName: 'drop-extra'
        targetPath: '$(Build.BinariesDirectory)/extra-artifact'

    - task: PowerShell@2
      displayName: 'PowerShell Script'
      inputs:
        targetType: filePath
        filePath: $(Build.SourcesDirectory)\tools\ci_build\github\windows\extract_nuget_files.ps1

    - script: |
       dir
      workingDirectory: '$(Build.BinariesDirectory)/nuget-artifact'
      displayName: 'List artifacts'

    - script: |
       npm ci
      workingDirectory: '$(Build.SourcesDirectory)/js'
      displayName: 'Install NPM packages /js'
    - script: |
       npm ci
      workingDirectory: '$(Build.SourcesDirectory)/js/common'
      displayName: 'Install NPM packages /js/common'
    - script: |
       npm ci
      workingDirectory: '$(Build.SourcesDirectory)/js/node'
      displayName: 'Install NPM packages /js/node'

    # Node.js binding win32/x64
    - task: CopyFiles@2
      displayName: 'Copy nuget binaries to: $(Build.SourcesDirectory)\js\node\bin\napi-v3\win32\x64\'
      inputs:
        SourceFolder: '$(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\nuget-artifacts\onnxruntime-win-x64\lib'
        Contents: '*.dll'
        TargetFolder: '$(Build.SourcesDirectory)\js\node\bin\napi-v3\win32\x64'
    - task: CopyFiles@2
      displayName: 'Copy nodejs binaries to: $(Build.SourcesDirectory)\js\node\bin\napi-v3\win32\x64\'
      inputs:
        SourceFolder: '$(Build.BinariesDirectory)\nodejs-artifacts\win32\x64'
        Contents: '*.node'
        TargetFolder: '$(Build.SourcesDirectory)\js\node\bin\napi-v3\win32\x64'

    # Node.js binding win32/arm64
    - task: CopyFiles@2
      displayName: 'Copy nuget binaries to: $(Build.SourcesDirectory)\js\node\bin\napi-v3\win32\arm64\'
      inputs:
        SourceFolder: '$(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\nuget-artifacts\onnxruntime-win-arm64\lib'
        Contents: '*.dll'
        TargetFolder: '$(Build.SourcesDirectory)\js\node\bin\napi-v3\win32\arm64'
    - task: CopyFiles@2
      displayName: 'Copy nodejs binaries to: $(Build.SourcesDirectory)\js\node\bin\napi-v3\win32\arm64\'
      inputs:
        SourceFolder: '$(Build.BinariesDirectory)\nodejs-artifacts\win32\arm64'
        Contents: '*.node'
        TargetFolder: '$(Build.SourcesDirectory)\js\node\bin\napi-v3\win32\arm64'

    # Node.js binding linux/x64
    - task: CopyFiles@2
      displayName: 'Copy nuget binaries to: $(Build.SourcesDirectory)\js\node\bin\napi-v3\linux\x64\'
      inputs:
        SourceFolder: '$(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\nuget-artifacts\onnxruntime-linux-x64\lib'
        Contents: 'libonnxruntime.so.*'
        TargetFolder: '$(Build.SourcesDirectory)\js\node\bin\napi-v3\linux\x64'
    - task: CopyFiles@2
      displayName: 'Copy nodejs binaries to: $(Build.SourcesDirectory)\js\node\bin\napi-v3\linux\x64\'
      inputs:
        SourceFolder: '$(Build.BinariesDirectory)\nodejs-artifacts\linux\x64'
        Contents: '*.node'
        TargetFolder: '$(Build.SourcesDirectory)\js\node\bin\napi-v3\linux\x64'

    # Node.js binding linux/arm64
    - task: CopyFiles@2
      displayName: 'Copy nuget binaries to: $(Build.SourcesDirectory)\js\node\bin\napi-v3\linux\arm64\'
      inputs:
        SourceFolder: '$(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\nuget-artifacts\onnxruntime-linux-aarch64\lib'
        Contents: 'libonnxruntime.so.*'
        TargetFolder: '$(Build.SourcesDirectory)\js\node\bin\napi-v3\linux\arm64'
    - task: CopyFiles@2
      displayName: 'Copy nodejs binaries to: $(Build.SourcesDirectory)\js\node\bin\napi-v3\linux\arm64\'
      inputs:
        SourceFolder: '$(Build.BinariesDirectory)\nodejs-artifacts\linux\arm64'
        Contents: '*.node'
        TargetFolder: '$(Build.SourcesDirectory)\js\node\bin\napi-v3\linux\arm64'

    # Node.js binding darwin/x64
    - task: CopyFiles@2
      displayName: 'Copy nuget binaries to: $(Build.SourcesDirectory)\js\node\bin\napi-v3\darwin\x64\'
      inputs:
        SourceFolder: '$(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\nuget-artifacts\onnxruntime-osx-x86_64\lib'
        Contents: 'libonnxruntime.*.dylib'
        TargetFolder: '$(Build.SourcesDirectory)\js\node\bin\napi-v3\darwin\x64'
    - task: CopyFiles@2
      displayName: 'Copy nodejs binaries to: $(Build.SourcesDirectory)\js\node\bin\napi-v3\darwin\x64\'
      inputs:
        SourceFolder: '$(Build.BinariesDirectory)\nodejs-artifacts\darwin\x64'
        Contents: '*.node'
        TargetFolder: '$(Build.SourcesDirectory)\js\node\bin\napi-v3\darwin\x64'

    # Node.js binding darwin/arm64
    - task: CopyFiles@2
      displayName: 'Copy nuget binaries to: $(Build.SourcesDirectory)\js\node\bin\napi-v3\darwin\arm64\'
      inputs:
        SourceFolder: '$(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\nuget-artifacts\onnxruntime-osx-arm64\lib'
        Contents: 'libonnxruntime.*.dylib'
        TargetFolder: '$(Build.SourcesDirectory)\js\node\bin\napi-v3\darwin\arm64'
    - task: CopyFiles@2
      displayName: 'Copy nodejs binaries to: $(Build.SourcesDirectory)\js\node\bin\napi-v3\darwin\arm64\'
      inputs:
        SourceFolder: '$(Build.BinariesDirectory)\nodejs-artifacts\darwin\arm64'
        Contents: '*.node'
        TargetFolder: '$(Build.SourcesDirectory)\js\node\bin\napi-v3\darwin\arm64'

    - task: PowerShell@2
      inputs:
        filePath: '$(Build.SourcesDirectory)\tools\ci_build\github\js\pack-npm-packages.ps1'
        arguments: '$(NpmPackagingMode) $(Build.SourcesDirectory) node'
        workingDirectory: $(Build.BinariesDirectory)
        errorActionPreference: stop
      displayName: 'Pack NPM packages'

    - task: CopyFiles@2
      displayName: 'Copy onnxruntime-common package to staging directory'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/js/common/'
        Contents: 'onnxruntime-common-*.tgz'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: CopyFiles@2
      displayName: 'Copy onnxruntime-node package to staging directory'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/js/node/'
        Contents: 'onnxruntime-node-*.tgz'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishPipelineArtifact@0
      displayName: 'Publish NPM packages files'
      inputs:
        artifactName: 'NPM_packages'
        targetPath: '$(Build.ArtifactStagingDirectory)'

    - template: component-governance-component-detection-steps.yml
      parameters :
        condition : 'succeeded'

    - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
      displayName: 'Clean Agent Directories'
      condition: always()

- template: ../nodejs/templates/test_win.yml
  parameters:
    AgentPool : 'onnxruntime-Win-CPU-2022'
    StageSuffix : 'Win_CPU_x64'

- template: ../nodejs/templates/test_linux.yml
  parameters:
    AgentPool : 'onnxruntime-Ubuntu2004-AMD-CPU'
    StageSuffix : 'Linux_CPU_x64'

- template: ../nodejs/templates/test_macos.yml
  parameters:
    StageSuffix : 'macOS_CPU_x64'

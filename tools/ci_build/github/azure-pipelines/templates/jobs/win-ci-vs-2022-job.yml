parameters:
- name: BuildConfig
  type: string

- name: EnvSetupScript
  type: string

- name: job_name_suffix
  type: string

- name: buildArch
  type: string

- name: additionalBuildFlags
  type: string

- name: msbuildPlatform
  type: string

- name: isX86
  type: boolean
  default: false

- name: isTraining
  type: boolean
  default: false

- name: EnablePython
  type: boolean
  default: true

- name: RunOnnxRuntimeTests
  displayName: Run Tests?
  type: boolean
  default: true

- name: RunStaticCodeAnalysis
  displayName: Run Static Code Analysis
  type: boolean
  default: true

- name: ORT_EP_NAME
  type: string

- name: MachinePool
  type: string

- name: GenerateDocumentation
  displayName: Generate updated documentation. Requires build to have occurred and `--gen_doc` to be specified
  type: boolean
  default: false

- name: WITH_CACHE
  displayName: Use Cache to acclerate compilation
  type: boolean
  default: false

- name: OnnxruntimeTestGpuDeviceId
  type: number
  default: 0


jobs:
- job: build_${{ parameters.job_name_suffix }}
  variables:
    OrtPackageId: 'Microsoft.ML.OnnxRuntime'
    OnnxRuntimeBuildDirectory: '$(Build.BinariesDirectory)'
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
    setVcvars: true
    ALLOW_RELEASED_ONNX_OPSET_ONLY: '0'
    DocUpdateNeeded: false  # Set to true during document generation if there are diffs
    NVIDIA_TF32_OVERRIDE: '0'
    skipComponentGovernanceDetection: true
    DEPS_CACHE_DIR: $(Agent.TempDirectory)/deps_ccache
    ORT_CACHE_DIR: $(Agent.TempDirectory)/ort_ccache
    TODAY: $[format('{0:dd}{0:MM}{0:yyyy}', pipeline.startTime)]
    ONNXRUNTIME_TEST_GPU_DEVICE_ID: ${{ parameters.OnnxruntimeTestGpuDeviceId }}
    ${{ if eq(parameters.WITH_CACHE, true) }}:
      PS_CACHE_ARG: '-use_cache'
      PY_CACHE_ARG: '--use_cache'
      MSBUILD_CACHE_ARG: '/p:CLToolExe=cl.exe /p:CLToolPath=C:\ProgramData\chocolatey\bin /p:TrackFileAccess=false /p:UseMultiToolTask=true /p:DebugInformationFormat=OldStyle'
  workspace:
    clean: all
  pool:
    name: ${{ parameters.MachinePool }}
    demands:
      - ImageVersionOverride -equals 1.0.344639
  timeoutInMinutes:  300
  steps:
  - checkout: self
    clean: true
    submodules: none

  - ${{ if eq(parameters.RunStaticCodeAnalysis, true) }}:
      # Manually set msBuildCommandline so that we can also set CAExcludePath
      # build_dir must be a sub folder of $(Build.SourcesDirectory)
      # TODO: move this step to a CPU-only machine to save GPU resources.
      - task: SDLNativeRules@3
        displayName: 'Run the PREfast SDL Native Rules for MSBuild'
        inputs:
          msBuildArchitecture: amd64
          setupCommandlines: 'python $(Build.SourcesDirectory)\tools\ci_build\build.py --config Debug --build_dir $(Build.SourcesDirectory)\b --skip_submodule_sync --skip_tests --build_shared_lib --update --cmake_generator "Visual Studio 17 2022" --build_shared_lib --enable_onnx_tests ${{ parameters.additionalBuildFlags }} --cmake_extra_defines onnxruntime_ENABLE_STATIC_ANALYSIS=ON onnxruntime_ENABLE_LTO=OFF'
          msBuildCommandline: '"C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\amd64\msbuild.exe" "$(Build.SourcesDirectory)\b\Debug\onnxruntime.sln" /p:RunCodeAnalysis=true /p:platform=${{ parameters.msbuildPlatform }} /p:configuration=Debug /p:VisualStudioVersion="17.0" /p:PreferredToolArchitecture=x64 /m:4'
          excludedPaths: '$(Build.SourcesDirectory)\b#$(Build.SourcesDirectory)\cmake'
          rulesetName: Custom
          customRuleset: $(Build.SourcesDirectory)\cmake\Sdl.ruleset
          publishXML: true
        continueOnError: true

      - task: SdtReport@2
        displayName: 'Create Security Analysis Report'
        inputs:
          SDLNativeRules: true

      - task: PublishSecurityAnalysisLogs@3
        displayName: 'Publish Security Analysis Logs'
        continueOnError: true

      - task: PostAnalysis@2
        displayName: 'Guardian Break v2'
        inputs:
          GdnBreakGdnToolSDLNativeRulesSeverity: Note
          GdnBreakGdnToolSDLNativeRules: true
